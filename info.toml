# The format version is an indicator of the compatibility of third-party exercises with the
# Rustlings program.
# The format version is not the same as the version of the Rustlings program.
# In case Rustlings makes an unavoidable breaking change to the expected format of third-party
# exercises, you would need to raise this version and adapt to the new format.
# Otherwise, the newest version of the Rustlings program won't be able to run these exercises.
format_version = 1

# Optional multi-line message to be shown to users when just starting with the exercises.
welcome_message = """Welcome to these Falco plugin Rustlings exercises."""

# Optional multi-line message to be shown to users after finishing all exercises.
final_message = """We hope that you found the exercises helpful :D"""

# Repeat this section for every exercise.
[[exercises]]
# Exercise name which is the exercise file name without the `.rs` extension.
name = "building_the_sdk_just_a_moment_please"

# Optional directory name to be provided if you want to organize exercises in directories.
# If `dir` is specified, the exercise path is `exercises/DIR/NAME.rs`
# Otherwise, the path is `exercises/NAME.rs`
# dir = "???"

# Rustlings expects the exercise to contain tests and run them.
# You can optionally disable testing by setting `test` to `false` (the default is `true`).
# In that case, the exercise will be considered done when it just successfully compiles.
# test = true

# Rustlings will always run Clippy on exercises.
# You can optionally set `strict_clippy` to `true` (the default is `false`) to only consider
# the exercise as done when there are no warnings left.
# strict_clippy = false

# A multi-line hint to be shown to users on request.
hint = """No hints here, if this exercise doesn't pass automatically, please report a bug"""

[[exercises]]
name = "your_first_plugin"
hint = """Implement all the missing constants (and the constructor method) for your plugin"""

[[exercises]]
name = "source_plugin_01"
hint = """Implement an instance type and connect it to your source plugin. Make sure the tests pass"""
test = true

[[exercises]]
name = "source_plugin_yielding_events"
hint = """Make the source plugin emit a continuous stream of random numbers"""
test = true

[[exercises]]
name = "source_plugin_extract"
hint = """Implement source plugin extraction capability"""
test = true
